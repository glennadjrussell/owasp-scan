{
	"@programName": "ZAP",
	"@version": "2.14.0",
	"@generated": "Fri, 8 Dec 2023 16:42:49",
	"site":[ 
		{
			"@name": "http://host.docker.internal:3000",
			"@host": "host.docker.internal",
			"@port": "3000",
			"@ssl": "false",
			"alerts": [ 
				{
					"pluginid": "10202",
					"alertRef": "10202",
					"alert": "Absence of Anti-CSRF Tokens",
					"name": "Absence of Anti-CSRF Tokens",
					"riskcode": "2",
					"confidence": "1",
					"riskdesc": "Medium (Low)",
					"desc": "<p>No Anti-CSRF tokens were found in a HTML submission form.</p><p>A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.</p><p></p><p>CSRF attacks are effective in a number of situations, including:</p><p>    * The victim has an active session on the target site.</p><p>    * The victim is authenticated via HTTP auth on the target site.</p><p>    * The victim is on the same local network as the target site.</p><p></p><p>CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.</p>",
					"instances":[ 
						{
							"uri": "http://host.docker.internal:3000/sverdle",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "<form method=\"POST\" action=\"?/enter\" class=\"svelte-1pg2j5l\">",
							"otherinfo": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"guess\" ]."
						}
					],
					"count": "1",
					"solution": "<p>Phase: Architecture and Design</p><p>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</p><p>For example, use anti-CSRF packages such as the OWASP CSRFGuard.</p><p></p><p>Phase: Implementation</p><p>Ensure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.</p><p></p><p>Phase: Architecture and Design</p><p>Generate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).</p><p>Note that this can be bypassed using XSS.</p><p></p><p>Identify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.</p><p>Note that this can be bypassed using XSS.</p><p></p><p>Use the ESAPI Session Management control.</p><p>This control includes a component for CSRF.</p><p></p><p>Do not use the GET method for any request that triggers a state change.</p><p></p><p>Phase: Implementation</p><p>Check the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.</p>",
					"otherinfo": "<p>No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"guess\" ].</p>",
					"reference": "<p>http://projects.webappsec.org/Cross-Site-Request-Forgery</p><p>https://cwe.mitre.org/data/definitions/352.html</p>",
					"cweid": "352",
					"wascid": "9",
					"sourceid": "28"
				},
				{
					"pluginid": "20012",
					"alertRef": "20012",
					"alert": "Anti-CSRF Tokens Check",
					"name": "Anti-CSRF Tokens Check",
					"riskcode": "2",
					"confidence": "2",
					"riskdesc": "Medium (Medium)",
					"desc": "<p>A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.</p><p></p><p>CSRF attacks are effective in a number of situations, including:</p><p>    * The victim has an active session on the target site.</p><p>    * The victim is authenticated via HTTP auth on the target site.</p><p>    * The victim is on the same local network as the target site.</p><p></p><p>CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.</p>",
					"instances":[ 
						{
							"uri": "http://host.docker.internal:3000/sverdle",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "<form method=\"POST\" action=\"?/enter\" class=\"svelte-1pg2j5l\">",
							"otherinfo": ""
						}
					],
					"count": "1",
					"solution": "<p>Phase: Architecture and Design</p><p>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</p><p>For example, use anti-CSRF packages such as the OWASP CSRFGuard.</p><p></p><p>Phase: Implementation</p><p>Ensure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.</p><p></p><p>Phase: Architecture and Design</p><p>Generate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).</p><p>Note that this can be bypassed using XSS.</p><p></p><p>Identify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.</p><p>Note that this can be bypassed using XSS.</p><p></p><p>Use the ESAPI Session Management control.</p><p>This control includes a component for CSRF.</p><p></p><p>Do not use the GET method for any request that triggers a state change.</p><p></p><p>Phase: Implementation</p><p>Check the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.</p>",
					"otherinfo": "",
					"reference": "<p>http://projects.webappsec.org/Cross-Site-Request-Forgery</p><p>https://cwe.mitre.org/data/definitions/352.html</p>",
					"cweid": "352",
					"wascid": "9",
					"sourceid": "6364"
				},
				{
					"pluginid": "40038",
					"alertRef": "40038",
					"alert": "Bypassing 403",
					"name": "Bypassing 403",
					"riskcode": "2",
					"confidence": "2",
					"riskdesc": "Medium (Medium)",
					"desc": "<p>Bypassing 403 endpoints may be possible, the scan rule sent a payload that caused the response to be accessible (status code 200).</p>",
					"instances":[ 
						{
							"uri": "http://host.docker.internal:3000/%2e/sverdle",
							"method": "GET",
							"param": "",
							"attack": "/%2e/sverdle",
							"evidence": "",
							"otherinfo": "http://host.docker.internal:3000/sverdle?/enter"
						}
					],
					"count": "1",
					"solution": "",
					"otherinfo": "<p>http://host.docker.internal:3000/sverdle?/enter</p>",
					"reference": "<p>https://www.acunetix.com/blog/articles/a-fresh-look-on-reverse-proxy-related-attacks/</p><p>https://i.blackhat.com/us-18/Wed-August-8/us-18-Orange-Tsai-Breaking-Parser-Logic-Take-Your-Path-Normalization-Off-And-Pop-0days-Out-2.pdf</p><p>https://www.contextis.com/en/blog/server-technologies-reverse-proxy-bypass</p>",
					"cweid": "0",
					"wascid": "0",
					"sourceid": "6660"
				},
				{
					"pluginid": "10038",
					"alertRef": "10038-1",
					"alert": "Content Security Policy (CSP) Header Not Set",
					"name": "Content Security Policy (CSP) Header Not Set",
					"riskcode": "2",
					"confidence": "3",
					"riskdesc": "Medium (High)",
					"desc": "<p>Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.</p>",
					"instances":[ 
						{
							"uri": "http://host.docker.internal:3000",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						},
						{
							"uri": "http://host.docker.internal:3000/",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						},
						{
							"uri": "http://host.docker.internal:3000/about",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						},
						{
							"uri": "http://host.docker.internal:3000/sitemap.xml",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						},
						{
							"uri": "http://host.docker.internal:3000/sverdle",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						},
						{
							"uri": "http://host.docker.internal:3000/sverdle/how-to-play",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						}
					],
					"count": "6",
					"solution": "<p>Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.</p>",
					"otherinfo": "",
					"reference": "<p>https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy</p><p>https://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html</p><p>http://www.w3.org/TR/CSP/</p><p>http://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html</p><p>http://www.html5rocks.com/en/tutorials/security/content-security-policy/</p><p>http://caniuse.com/#feat=contentsecuritypolicy</p><p>http://content-security-policy.com/</p>",
					"cweid": "693",
					"wascid": "15",
					"sourceid": "8"
				},
				{
					"pluginid": "10020",
					"alertRef": "10020-1",
					"alert": "Missing Anti-clickjacking Header",
					"name": "Missing Anti-clickjacking Header",
					"riskcode": "2",
					"confidence": "2",
					"riskdesc": "Medium (Medium)",
					"desc": "<p>The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.</p>",
					"instances":[ 
						{
							"uri": "http://host.docker.internal:3000",
							"method": "GET",
							"param": "x-frame-options",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						},
						{
							"uri": "http://host.docker.internal:3000/",
							"method": "GET",
							"param": "x-frame-options",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						},
						{
							"uri": "http://host.docker.internal:3000/about",
							"method": "GET",
							"param": "x-frame-options",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						},
						{
							"uri": "http://host.docker.internal:3000/sverdle",
							"method": "GET",
							"param": "x-frame-options",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						},
						{
							"uri": "http://host.docker.internal:3000/sverdle/how-to-play",
							"method": "GET",
							"param": "x-frame-options",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						}
					],
					"count": "5",
					"solution": "<p>Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.</p><p>If you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.</p>",
					"otherinfo": "",
					"reference": "<p>https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options</p>",
					"cweid": "1021",
					"wascid": "15",
					"sourceid": "8"
				},
				{
					"pluginid": "10051",
					"alertRef": "10051",
					"alert": "Relative Path Confusion",
					"name": "Relative Path Confusion",
					"riskcode": "2",
					"confidence": "2",
					"riskdesc": "Medium (Medium)",
					"desc": "<p>The web server is configured to serve responses to ambiguous URLs in a manner that is likely to lead to confusion about the correct \"relative path\" for the URL. Resources (CSS, images, etc.) are also specified in the page response using relative, rather than absolute URLs. In an attack, if the web browser parses the \"cross-content\" response in a permissive manner, or can be tricked into permissively parsing the \"cross-content\" response, using techniques such as framing, then the web browser may be fooled into interpreting HTML as CSS (or other content types), leading to an XSS vulnerability.</p>",
					"instances":[ 
						{
							"uri": "http://host.docker.internal:3000/_app/immutable/assets/0.fa9427ff.css",
							"method": "GET",
							"param": "",
							"attack": "http://host.docker.internal:3000/_app/immutable/assets/0.fa9427ff.css/tplev/z2r59",
							"evidence": "<link rel=\"icon\" href=\"../../../../../favicon.png\">",
							"otherinfo": "No <base> tag was specified in the HTML <head> tag to define the location for relative URLs.\nA Content Type of \"text/html\" was specified. If the web browser is employing strict parsing rules, this will prevent cross-content attacks from succeeding. Quirks Mode in the web browser would disable strict parsing.  \nNo X-Frame-Options header was specified, so the page can be framed, and this can be used to enable Quirks Mode, allowing the specified Content Type to be bypassed."
						},
						{
							"uri": "http://host.docker.internal:3000/_app/immutable/assets/2.57239003.css",
							"method": "GET",
							"param": "",
							"attack": "http://host.docker.internal:3000/_app/immutable/assets/2.57239003.css/tplev/z2r59",
							"evidence": "<link rel=\"icon\" href=\"../../../../../favicon.png\">",
							"otherinfo": "No <base> tag was specified in the HTML <head> tag to define the location for relative URLs.\nA Content Type of \"text/html\" was specified. If the web browser is employing strict parsing rules, this will prevent cross-content attacks from succeeding. Quirks Mode in the web browser would disable strict parsing.  \nNo X-Frame-Options header was specified, so the page can be framed, and this can be used to enable Quirks Mode, allowing the specified Content Type to be bypassed."
						},
						{
							"uri": "http://host.docker.internal:3000/_app/immutable/assets/4.9d501049.css",
							"method": "GET",
							"param": "",
							"attack": "http://host.docker.internal:3000/_app/immutable/assets/4.9d501049.css/tplev/z2r59",
							"evidence": "<link rel=\"icon\" href=\"../../../../../favicon.png\">",
							"otherinfo": "No <base> tag was specified in the HTML <head> tag to define the location for relative URLs.\nA Content Type of \"text/html\" was specified. If the web browser is employing strict parsing rules, this will prevent cross-content attacks from succeeding. Quirks Mode in the web browser would disable strict parsing.  \nNo X-Frame-Options header was specified, so the page can be framed, and this can be used to enable Quirks Mode, allowing the specified Content Type to be bypassed."
						},
						{
							"uri": "http://host.docker.internal:3000/_app/immutable/assets/5.89a9e780.css",
							"method": "GET",
							"param": "",
							"attack": "http://host.docker.internal:3000/_app/immutable/assets/5.89a9e780.css/tplev/z2r59",
							"evidence": "<link rel=\"icon\" href=\"../../../../../favicon.png\">",
							"otherinfo": "No <base> tag was specified in the HTML <head> tag to define the location for relative URLs.\nA Content Type of \"text/html\" was specified. If the web browser is employing strict parsing rules, this will prevent cross-content attacks from succeeding. Quirks Mode in the web browser would disable strict parsing.  \nNo X-Frame-Options header was specified, so the page can be framed, and this can be used to enable Quirks Mode, allowing the specified Content Type to be bypassed."
						},
						{
							"uri": "http://host.docker.internal:3000/_app/immutable/assets/github.1ea8d62e.svg",
							"method": "GET",
							"param": "",
							"attack": "http://host.docker.internal:3000/_app/immutable/assets/github.1ea8d62e.svg/tplev/z2r59",
							"evidence": "<link rel=\"icon\" href=\"../../../../../favicon.png\">",
							"otherinfo": "No <base> tag was specified in the HTML <head> tag to define the location for relative URLs.\nA Content Type of \"text/html\" was specified. If the web browser is employing strict parsing rules, this will prevent cross-content attacks from succeeding. Quirks Mode in the web browser would disable strict parsing.  \nNo X-Frame-Options header was specified, so the page can be framed, and this can be used to enable Quirks Mode, allowing the specified Content Type to be bypassed."
						},
						{
							"uri": "http://host.docker.internal:3000/_app/immutable/assets/svelte-logo.87df40b8.svg",
							"method": "GET",
							"param": "",
							"attack": "http://host.docker.internal:3000/_app/immutable/assets/svelte-logo.87df40b8.svg/tplev/z2r59",
							"evidence": "<link rel=\"icon\" href=\"../../../../../favicon.png\">",
							"otherinfo": "No <base> tag was specified in the HTML <head> tag to define the location for relative URLs.\nA Content Type of \"text/html\" was specified. If the web browser is employing strict parsing rules, this will prevent cross-content attacks from succeeding. Quirks Mode in the web browser would disable strict parsing.  \nNo X-Frame-Options header was specified, so the page can be framed, and this can be used to enable Quirks Mode, allowing the specified Content Type to be bypassed."
						},
						{
							"uri": "http://host.docker.internal:3000/_app/immutable/assets/svelte-welcome.6c300099.png",
							"method": "GET",
							"param": "",
							"attack": "http://host.docker.internal:3000/_app/immutable/assets/svelte-welcome.6c300099.png/tplev/z2r59",
							"evidence": "<link rel=\"icon\" href=\"../../../../../favicon.png\">",
							"otherinfo": "No <base> tag was specified in the HTML <head> tag to define the location for relative URLs.\nA Content Type of \"text/html\" was specified. If the web browser is employing strict parsing rules, this will prevent cross-content attacks from succeeding. Quirks Mode in the web browser would disable strict parsing.  \nNo X-Frame-Options header was specified, so the page can be framed, and this can be used to enable Quirks Mode, allowing the specified Content Type to be bypassed."
						},
						{
							"uri": "http://host.docker.internal:3000/_app/immutable/chunks/index.14349a18.js",
							"method": "GET",
							"param": "",
							"attack": "http://host.docker.internal:3000/_app/immutable/chunks/index.14349a18.js/tplev/z2r59",
							"evidence": "<link rel=\"icon\" href=\"../../../../../favicon.png\">",
							"otherinfo": "No <base> tag was specified in the HTML <head> tag to define the location for relative URLs.\nA Content Type of \"text/html\" was specified. If the web browser is employing strict parsing rules, this will prevent cross-content attacks from succeeding. Quirks Mode in the web browser would disable strict parsing.  \nNo X-Frame-Options header was specified, so the page can be framed, and this can be used to enable Quirks Mode, allowing the specified Content Type to be bypassed."
						},
						{
							"uri": "http://host.docker.internal:3000/_app/immutable/chunks/index.200976ee.js",
							"method": "GET",
							"param": "",
							"attack": "http://host.docker.internal:3000/_app/immutable/chunks/index.200976ee.js/tplev/z2r59",
							"evidence": "<link rel=\"icon\" href=\"../../../../../favicon.png\">",
							"otherinfo": "No <base> tag was specified in the HTML <head> tag to define the location for relative URLs.\nA Content Type of \"text/html\" was specified. If the web browser is employing strict parsing rules, this will prevent cross-content attacks from succeeding. Quirks Mode in the web browser would disable strict parsing.  \nNo X-Frame-Options header was specified, so the page can be framed, and this can be used to enable Quirks Mode, allowing the specified Content Type to be bypassed."
						},
						{
							"uri": "http://host.docker.internal:3000/_app/immutable/chunks/parse.bee59afc.js",
							"method": "GET",
							"param": "",
							"attack": "http://host.docker.internal:3000/_app/immutable/chunks/parse.bee59afc.js/tplev/z2r59",
							"evidence": "<link rel=\"icon\" href=\"../../../../../favicon.png\">",
							"otherinfo": "No <base> tag was specified in the HTML <head> tag to define the location for relative URLs.\nA Content Type of \"text/html\" was specified. If the web browser is employing strict parsing rules, this will prevent cross-content attacks from succeeding. Quirks Mode in the web browser would disable strict parsing.  \nNo X-Frame-Options header was specified, so the page can be framed, and this can be used to enable Quirks Mode, allowing the specified Content Type to be bypassed."
						},
						{
							"uri": "http://host.docker.internal:3000/_app/immutable/chunks/scheduler.cbf234a0.js",
							"method": "GET",
							"param": "",
							"attack": "http://host.docker.internal:3000/_app/immutable/chunks/scheduler.cbf234a0.js/tplev/z2r59",
							"evidence": "<link rel=\"icon\" href=\"../../../../../favicon.png\">",
							"otherinfo": "No <base> tag was specified in the HTML <head> tag to define the location for relative URLs.\nA Content Type of \"text/html\" was specified. If the web browser is employing strict parsing rules, this will prevent cross-content attacks from succeeding. Quirks Mode in the web browser would disable strict parsing.  \nNo X-Frame-Options header was specified, so the page can be framed, and this can be used to enable Quirks Mode, allowing the specified Content Type to be bypassed."
						},
						{
							"uri": "http://host.docker.internal:3000/_app/immutable/chunks/singletons.d609e9f1.js",
							"method": "GET",
							"param": "",
							"attack": "http://host.docker.internal:3000/_app/immutable/chunks/singletons.d609e9f1.js/tplev/z2r59",
							"evidence": "<link rel=\"icon\" href=\"../../../../../favicon.png\">",
							"otherinfo": "No <base> tag was specified in the HTML <head> tag to define the location for relative URLs.\nA Content Type of \"text/html\" was specified. If the web browser is employing strict parsing rules, this will prevent cross-content attacks from succeeding. Quirks Mode in the web browser would disable strict parsing.  \nNo X-Frame-Options header was specified, so the page can be framed, and this can be used to enable Quirks Mode, allowing the specified Content Type to be bypassed."
						},
						{
							"uri": "http://host.docker.internal:3000/_app/immutable/chunks/stores.489f6f24.js",
							"method": "GET",
							"param": "",
							"attack": "http://host.docker.internal:3000/_app/immutable/chunks/stores.489f6f24.js/tplev/z2r59",
							"evidence": "<link rel=\"icon\" href=\"../../../../../favicon.png\">",
							"otherinfo": "No <base> tag was specified in the HTML <head> tag to define the location for relative URLs.\nA Content Type of \"text/html\" was specified. If the web browser is employing strict parsing rules, this will prevent cross-content attacks from succeeding. Quirks Mode in the web browser would disable strict parsing.  \nNo X-Frame-Options header was specified, so the page can be framed, and this can be used to enable Quirks Mode, allowing the specified Content Type to be bypassed."
						},
						{
							"uri": "http://host.docker.internal:3000/_app/immutable/entry/app.00d99c01.js",
							"method": "GET",
							"param": "",
							"attack": "http://host.docker.internal:3000/_app/immutable/entry/app.00d99c01.js/tplev/z2r59",
							"evidence": "<link rel=\"icon\" href=\"../../../../../favicon.png\">",
							"otherinfo": "No <base> tag was specified in the HTML <head> tag to define the location for relative URLs.\nA Content Type of \"text/html\" was specified. If the web browser is employing strict parsing rules, this will prevent cross-content attacks from succeeding. Quirks Mode in the web browser would disable strict parsing.  \nNo X-Frame-Options header was specified, so the page can be framed, and this can be used to enable Quirks Mode, allowing the specified Content Type to be bypassed."
						},
						{
							"uri": "http://host.docker.internal:3000/_app/immutable/entry/start.b816172a.js",
							"method": "GET",
							"param": "",
							"attack": "http://host.docker.internal:3000/_app/immutable/entry/start.b816172a.js/tplev/z2r59",
							"evidence": "<link rel=\"icon\" href=\"../../../../../favicon.png\">",
							"otherinfo": "No <base> tag was specified in the HTML <head> tag to define the location for relative URLs.\nA Content Type of \"text/html\" was specified. If the web browser is employing strict parsing rules, this will prevent cross-content attacks from succeeding. Quirks Mode in the web browser would disable strict parsing.  \nNo X-Frame-Options header was specified, so the page can be framed, and this can be used to enable Quirks Mode, allowing the specified Content Type to be bypassed."
						},
						{
							"uri": "http://host.docker.internal:3000/_app/immutable/nodes/0.b5c2e204.js",
							"method": "GET",
							"param": "",
							"attack": "http://host.docker.internal:3000/_app/immutable/nodes/0.b5c2e204.js/tplev/z2r59",
							"evidence": "<link rel=\"icon\" href=\"../../../../../favicon.png\">",
							"otherinfo": "No <base> tag was specified in the HTML <head> tag to define the location for relative URLs.\nA Content Type of \"text/html\" was specified. If the web browser is employing strict parsing rules, this will prevent cross-content attacks from succeeding. Quirks Mode in the web browser would disable strict parsing.  \nNo X-Frame-Options header was specified, so the page can be framed, and this can be used to enable Quirks Mode, allowing the specified Content Type to be bypassed."
						},
						{
							"uri": "http://host.docker.internal:3000/_app/immutable/nodes/1.b7f38415.js",
							"method": "GET",
							"param": "",
							"attack": "http://host.docker.internal:3000/_app/immutable/nodes/1.b7f38415.js/tplev/z2r59",
							"evidence": "<link rel=\"icon\" href=\"../../../../../favicon.png\">",
							"otherinfo": "No <base> tag was specified in the HTML <head> tag to define the location for relative URLs.\nA Content Type of \"text/html\" was specified. If the web browser is employing strict parsing rules, this will prevent cross-content attacks from succeeding. Quirks Mode in the web browser would disable strict parsing.  \nNo X-Frame-Options header was specified, so the page can be framed, and this can be used to enable Quirks Mode, allowing the specified Content Type to be bypassed."
						},
						{
							"uri": "http://host.docker.internal:3000/_app/immutable/nodes/2.549c4b9e.js",
							"method": "GET",
							"param": "",
							"attack": "http://host.docker.internal:3000/_app/immutable/nodes/2.549c4b9e.js/tplev/z2r59",
							"evidence": "<link rel=\"icon\" href=\"../../../../../favicon.png\">",
							"otherinfo": "No <base> tag was specified in the HTML <head> tag to define the location for relative URLs.\nA Content Type of \"text/html\" was specified. If the web browser is employing strict parsing rules, this will prevent cross-content attacks from succeeding. Quirks Mode in the web browser would disable strict parsing.  \nNo X-Frame-Options header was specified, so the page can be framed, and this can be used to enable Quirks Mode, allowing the specified Content Type to be bypassed."
						},
						{
							"uri": "http://host.docker.internal:3000/_app/immutable/nodes/4.ccddcbc7.js",
							"method": "GET",
							"param": "",
							"attack": "http://host.docker.internal:3000/_app/immutable/nodes/4.ccddcbc7.js/tplev/z2r59",
							"evidence": "<link rel=\"icon\" href=\"../../../../../favicon.png\">",
							"otherinfo": "No <base> tag was specified in the HTML <head> tag to define the location for relative URLs.\nA Content Type of \"text/html\" was specified. If the web browser is employing strict parsing rules, this will prevent cross-content attacks from succeeding. Quirks Mode in the web browser would disable strict parsing.  \nNo X-Frame-Options header was specified, so the page can be framed, and this can be used to enable Quirks Mode, allowing the specified Content Type to be bypassed."
						},
						{
							"uri": "http://host.docker.internal:3000/favicon.png",
							"method": "GET",
							"param": "",
							"attack": "http://host.docker.internal:3000/favicon.png/tplev/z2r59",
							"evidence": "<link rel=\"icon\" href=\"../../favicon.png\">",
							"otherinfo": "No <base> tag was specified in the HTML <head> tag to define the location for relative URLs.\nA Content Type of \"text/html\" was specified. If the web browser is employing strict parsing rules, this will prevent cross-content attacks from succeeding. Quirks Mode in the web browser would disable strict parsing.  \nNo X-Frame-Options header was specified, so the page can be framed, and this can be used to enable Quirks Mode, allowing the specified Content Type to be bypassed."
						},
						{
							"uri": "http://host.docker.internal:3000/robots.txt",
							"method": "GET",
							"param": "",
							"attack": "http://host.docker.internal:3000/robots.txt/tplev/z2r59",
							"evidence": "<link rel=\"icon\" href=\"../../favicon.png\">",
							"otherinfo": "No <base> tag was specified in the HTML <head> tag to define the location for relative URLs.\nA Content Type of \"text/html\" was specified. If the web browser is employing strict parsing rules, this will prevent cross-content attacks from succeeding. Quirks Mode in the web browser would disable strict parsing.  \nNo X-Frame-Options header was specified, so the page can be framed, and this can be used to enable Quirks Mode, allowing the specified Content Type to be bypassed."
						},
						{
							"uri": "http://host.docker.internal:3000/sitemap.xml",
							"method": "GET",
							"param": "",
							"attack": "http://host.docker.internal:3000/sitemap.xml/tplev/z2r59",
							"evidence": "<link rel=\"icon\" href=\"../../favicon.png\">",
							"otherinfo": "No <base> tag was specified in the HTML <head> tag to define the location for relative URLs.\nA Content Type of \"text/html\" was specified. If the web browser is employing strict parsing rules, this will prevent cross-content attacks from succeeding. Quirks Mode in the web browser would disable strict parsing.  \nNo X-Frame-Options header was specified, so the page can be framed, and this can be used to enable Quirks Mode, allowing the specified Content Type to be bypassed."
						}
					],
					"count": "22",
					"solution": "<p>Web servers and frameworks should be updated to be configured to not serve responses to ambiguous URLs in such a way that the relative path of such URLs could be mis-interpreted by components on either the client side, or server side.</p><p>Within the application, the correct use of the \"<base>\" HTML tag in the HTTP response will unambiguously specify the base URL for all relative URLs in the document.</p><p>Use the \"Content-Type\" HTTP response header to make it harder for the attacker to force the web browser to mis-interpret the content type of the response.</p><p>Use the \"X-Content-Type-Options: nosniff\" HTTP response header to prevent the web browser from \"sniffing\" the content type of the response.</p><p>Use a modern DOCTYPE such as \"<!doctype html>\" to prevent the page from being rendered in the web browser using \"Quirks Mode\", since this results in the content type being ignored by the web browser.</p><p>Specify the \"X-Frame-Options\" HTTP response header to prevent Quirks Mode from being enabled in the web browser using framing attacks. </p>",
					"otherinfo": "<p>No <base> tag was specified in the HTML <head> tag to define the location for relative URLs.</p><p>A Content Type of \"text/html\" was specified. If the web browser is employing strict parsing rules, this will prevent cross-content attacks from succeeding. Quirks Mode in the web browser would disable strict parsing.  </p><p>No X-Frame-Options header was specified, so the page can be framed, and this can be used to enable Quirks Mode, allowing the specified Content Type to be bypassed.</p>",
					"reference": "<p>http://www.thespanner.co.uk/2014/03/21/rpo/</p><p>https://hsivonen.fi/doctype/</p><p>http://www.w3schools.com/tags/tag_base.asp</p>",
					"cweid": "20",
					"wascid": "20",
					"sourceid": "5457"
				},
				{
					"pluginid": "10063",
					"alertRef": "10063-1",
					"alert": "Permissions Policy Header Not Set",
					"name": "Permissions Policy Header Not Set",
					"riskcode": "1",
					"confidence": "2",
					"riskdesc": "Low (Medium)",
					"desc": "<p>Permissions Policy Header is an added layer of security that helps to restrict from unauthorized access or usage of browser/client features by web resources. This policy ensures the user privacy by limiting or specifying the features of the browsers can be used by the web resources. Permissions Policy provides a set of standard HTTP headers that allow website owners to limit which features of browsers can be used by the page such as camera, microphone, location, full screen etc.</p>",
					"instances":[ 
						{
							"uri": "http://host.docker.internal:3000",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						},
						{
							"uri": "http://host.docker.internal:3000/",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						},
						{
							"uri": "http://host.docker.internal:3000/_app/immutable/chunks/index.14349a18.js",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						},
						{
							"uri": "http://host.docker.internal:3000/_app/immutable/chunks/parse.bee59afc.js",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						},
						{
							"uri": "http://host.docker.internal:3000/_app/immutable/chunks/scheduler.cbf234a0.js",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						},
						{
							"uri": "http://host.docker.internal:3000/_app/immutable/chunks/singletons.d609e9f1.js",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						},
						{
							"uri": "http://host.docker.internal:3000/_app/immutable/chunks/stores.489f6f24.js",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						},
						{
							"uri": "http://host.docker.internal:3000/_app/immutable/entry/start.b816172a.js",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						},
						{
							"uri": "http://host.docker.internal:3000/_app/immutable/nodes/0.b5c2e204.js",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						},
						{
							"uri": "http://host.docker.internal:3000/about",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						},
						{
							"uri": "http://host.docker.internal:3000/sitemap.xml",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						},
						{
							"uri": "http://host.docker.internal:3000/sverdle",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						}
					],
					"count": "12",
					"solution": "<p>Ensure that your web server, application server, load balancer, etc. is configured to set the Permissions-Policy header.</p>",
					"otherinfo": "",
					"reference": "<p>https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Permissions-Policy</p><p>https://developer.chrome.com/blog/feature-policy/</p><p>https://scotthelme.co.uk/a-new-security-header-feature-policy/</p><p>https://w3c.github.io/webappsec-feature-policy/</p><p>https://www.smashingmagazine.com/2018/12/feature-policy/</p>",
					"cweid": "693",
					"wascid": "15",
					"sourceid": "8"
				},
				{
					"pluginid": "10021",
					"alertRef": "10021",
					"alert": "X-Content-Type-Options Header Missing",
					"name": "X-Content-Type-Options Header Missing",
					"riskcode": "1",
					"confidence": "2",
					"riskdesc": "Low (Medium)",
					"desc": "<p>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.</p>",
					"instances":[ 
						{
							"uri": "http://host.docker.internal:3000",
							"method": "GET",
							"param": "x-content-type-options",
							"attack": "",
							"evidence": "",
							"otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
						},
						{
							"uri": "http://host.docker.internal:3000/",
							"method": "GET",
							"param": "x-content-type-options",
							"attack": "",
							"evidence": "",
							"otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
						},
						{
							"uri": "http://host.docker.internal:3000/_app/immutable/assets/0.fa9427ff.css",
							"method": "GET",
							"param": "x-content-type-options",
							"attack": "",
							"evidence": "",
							"otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
						},
						{
							"uri": "http://host.docker.internal:3000/_app/immutable/assets/2.57239003.css",
							"method": "GET",
							"param": "x-content-type-options",
							"attack": "",
							"evidence": "",
							"otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
						},
						{
							"uri": "http://host.docker.internal:3000/_app/immutable/assets/svelte-logo.87df40b8.svg",
							"method": "GET",
							"param": "x-content-type-options",
							"attack": "",
							"evidence": "",
							"otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
						},
						{
							"uri": "http://host.docker.internal:3000/_app/immutable/chunks/index.14349a18.js",
							"method": "GET",
							"param": "x-content-type-options",
							"attack": "",
							"evidence": "",
							"otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
						},
						{
							"uri": "http://host.docker.internal:3000/_app/immutable/chunks/scheduler.cbf234a0.js",
							"method": "GET",
							"param": "x-content-type-options",
							"attack": "",
							"evidence": "",
							"otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
						},
						{
							"uri": "http://host.docker.internal:3000/_app/immutable/chunks/singletons.d609e9f1.js",
							"method": "GET",
							"param": "x-content-type-options",
							"attack": "",
							"evidence": "",
							"otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
						},
						{
							"uri": "http://host.docker.internal:3000/about",
							"method": "GET",
							"param": "x-content-type-options",
							"attack": "",
							"evidence": "",
							"otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
						},
						{
							"uri": "http://host.docker.internal:3000/favicon.png",
							"method": "GET",
							"param": "x-content-type-options",
							"attack": "",
							"evidence": "",
							"otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
						},
						{
							"uri": "http://host.docker.internal:3000/robots.txt",
							"method": "GET",
							"param": "x-content-type-options",
							"attack": "",
							"evidence": "",
							"otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
						}
					],
					"count": "11",
					"solution": "<p>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.</p><p>If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.</p>",
					"otherinfo": "<p>This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.</p><p>At \"High\" threshold this scan rule will not alert on client or server error responses.</p>",
					"reference": "<p>http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx</p><p>https://owasp.org/www-community/Security_Headers</p>",
					"cweid": "693",
					"wascid": "15",
					"sourceid": "8"
				},
				{
					"pluginid": "10019",
					"alertRef": "10019",
					"alert": "Content-Type Header Missing",
					"name": "Content-Type Header Missing",
					"riskcode": "0",
					"confidence": "2",
					"riskdesc": "Informational (Medium)",
					"desc": "<p>The Content-Type header was either missing or empty.</p>",
					"instances":[ 
						{
							"uri": "http://host.docker.internal:3000/sverdle?/enter",
							"method": "POST",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						}
					],
					"count": "1",
					"solution": "<p>Ensure each page is setting the specific and appropriate content-type value for the content being delivered.</p>",
					"otherinfo": "",
					"reference": "<p>http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx</p>",
					"cweid": "345",
					"wascid": "12",
					"sourceid": "64"
				},
				{
					"pluginid": "10027",
					"alertRef": "10027",
					"alert": "Information Disclosure - Suspicious Comments",
					"name": "Information Disclosure - Suspicious Comments",
					"riskcode": "0",
					"confidence": "1",
					"riskdesc": "Informational (Low)",
					"desc": "<p>The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.</p>",
					"instances":[ 
						{
							"uri": "http://host.docker.internal:3000/_app/immutable/chunks/index.14349a18.js",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "from",
							"otherinfo": "The following pattern was used: \\bFROM\\b and was detected in the element starting with: \"import{n as b,s as l}from\"./scheduler.cbf234a0.js\";const n=[];function h(e,o){return{subscribe:p(e,o).subscribe}}function p(e,o=\", see evidence field for the suspicious comment/snippet."
						},
						{
							"uri": "http://host.docker.internal:3000/_app/immutable/chunks/index.200976ee.js",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "from",
							"otherinfo": "The following pattern was used: \\bFROM\\b and was detected in the element starting with: \"var C=Object.defineProperty;var D=(e,t,n)=>t in e?C(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n;var p=(e,t,n\", see evidence field for the suspicious comment/snippet."
						},
						{
							"uri": "http://host.docker.internal:3000/_app/immutable/chunks/singletons.d609e9f1.js",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "from",
							"otherinfo": "The following pattern was used: \\bFROM\\b and was detected in the element starting with: \"import{w as u}from\"./index.14349a18.js\";var _;const v=((_=globalThis.__sveltekit_kpgp90)==null?void 0:_.base)??\"\";var g;const m=\", see evidence field for the suspicious comment/snippet."
						},
						{
							"uri": "http://host.docker.internal:3000/_app/immutable/chunks/stores.489f6f24.js",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "from",
							"otherinfo": "The following pattern was used: \\bFROM\\b and was detected in the element starting with: \"import{d as e}from\"./singletons.d609e9f1.js\";const r=()=>{const s=e;return{page:{subscribe:s.page.subscribe},navigating:{subscri\", see evidence field for the suspicious comment/snippet."
						},
						{
							"uri": "http://host.docker.internal:3000/_app/immutable/entry/app.00d99c01.js",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "from",
							"otherinfo": "The following pattern was used: \\bFROM\\b and was detected in the element starting with: \"import{s as q,a as B,o as U,t as j,b as D}from\"../chunks/scheduler.cbf234a0.js\";import{S as W,i as z,s as F,e as d,c as G,a as g\", see evidence field for the suspicious comment/snippet."
						},
						{
							"uri": "http://host.docker.internal:3000/_app/immutable/entry/start.b816172a.js",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "from",
							"otherinfo": "The following pattern was used: \\bFROM\\b and was detected 2 times, the first in the element starting with: \"import{o as me,t as _e}from\"../chunks/scheduler.cbf234a0.js\";import{S as Je,a as Ke,I as q,g as De,f as Ne,b as we,c as le,s as \", see evidence field for the suspicious comment/snippet."
						},
						{
							"uri": "http://host.docker.internal:3000/_app/immutable/nodes/0.b5c2e204.js",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "from",
							"otherinfo": "The following pattern was used: \\bFROM\\b and was detected in the element starting with: \"import{s as Y,n as P,c as ae,d as le,u as re,g as ne,e as ue}from\"../chunks/scheduler.cbf234a0.js\";import{S as ee,i as te,g as v\", see evidence field for the suspicious comment/snippet."
						},
						{
							"uri": "http://host.docker.internal:3000/_app/immutable/nodes/1.b7f38415.js",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "from",
							"otherinfo": "The following pattern was used: \\bFROM\\b and was detected in the element starting with: \"import{s as x,n as u,c as S}from\"../chunks/scheduler.cbf234a0.js\";import{S as j,i as q,g as h,m as d,s as y,h as v,j as g,n as E\", see evidence field for the suspicious comment/snippet."
						},
						{
							"uri": "http://host.docker.internal:3000/_app/immutable/nodes/2.549c4b9e.js",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "from",
							"otherinfo": "The following pattern was used: \\bFROM\\b and was detected in the element starting with: \"import{n as O,s as G,r as X,c as Y}from\"../chunks/scheduler.cbf234a0.js\";import{S as F,i as K,g as b,s as L,m as N,h as w,j as k\", see evidence field for the suspicious comment/snippet."
						},
						{
							"uri": "http://host.docker.internal:3000/_app/immutable/nodes/4.ccddcbc7.js",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "from",
							"otherinfo": "The following pattern was used: \\bFROM\\b and was detected in the element starting with: \"import{r as Ae,s as He,f as Se,n as se,c as Ne,i as De,h as le}from\"../chunks/scheduler.cbf234a0.js\";import{d as Pe,S as Le,i as\", see evidence field for the suspicious comment/snippet."
						}
					],
					"count": "10",
					"solution": "<p>Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.</p>",
					"otherinfo": "<p>The following pattern was used: \\bFROM\\b and was detected in the element starting with: \"import{n as b,s as l}from\"./scheduler.cbf234a0.js\";const n=[];function h(e,o){return{subscribe:p(e,o).subscribe}}function p(e,o=\", see evidence field for the suspicious comment/snippet.</p>",
					"reference": "",
					"cweid": "200",
					"wascid": "13",
					"sourceid": "38"
				},
				{
					"pluginid": "10049",
					"alertRef": "10049",
					"alert": "Storable and Cacheable Content",
					"name": "Storable and Cacheable Content",
					"riskcode": "0",
					"confidence": "2",
					"riskdesc": "Informational (Medium)",
					"desc": "<p>The response contents are storable by caching components such as proxy servers, and may be retrieved directly from the cache, rather than from the origin server by the caching servers, in response to similar requests from other users.  If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where \"shared\" caching servers such as \"proxy\" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance.</p>",
					"instances":[ 
						{
							"uri": "http://host.docker.internal:3000",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": "In the absence of an explicitly specified caching lifetime directive in the response, a liberal lifetime heuristic of 1 year was assumed. This is permitted by rfc7234."
						},
						{
							"uri": "http://host.docker.internal:3000/",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": "In the absence of an explicitly specified caching lifetime directive in the response, a liberal lifetime heuristic of 1 year was assumed. This is permitted by rfc7234."
						},
						{
							"uri": "http://host.docker.internal:3000/_app/immutable/assets/0.fa9427ff.css",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "max-age=31536000",
							"otherinfo": ""
						},
						{
							"uri": "http://host.docker.internal:3000/_app/immutable/assets/2.57239003.css",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "max-age=31536000",
							"otherinfo": ""
						},
						{
							"uri": "http://host.docker.internal:3000/_app/immutable/assets/svelte-logo.87df40b8.svg",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "max-age=31536000",
							"otherinfo": ""
						},
						{
							"uri": "http://host.docker.internal:3000/_app/immutable/chunks/scheduler.cbf234a0.js",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "max-age=31536000",
							"otherinfo": ""
						},
						{
							"uri": "http://host.docker.internal:3000/_app/immutable/chunks/singletons.d609e9f1.js",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "max-age=31536000",
							"otherinfo": ""
						},
						{
							"uri": "http://host.docker.internal:3000/about",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": "In the absence of an explicitly specified caching lifetime directive in the response, a liberal lifetime heuristic of 1 year was assumed. This is permitted by rfc7234."
						},
						{
							"uri": "http://host.docker.internal:3000/favicon.png",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": "In the absence of an explicitly specified caching lifetime directive in the response, a liberal lifetime heuristic of 1 year was assumed. This is permitted by rfc7234."
						},
						{
							"uri": "http://host.docker.internal:3000/robots.txt",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": "In the absence of an explicitly specified caching lifetime directive in the response, a liberal lifetime heuristic of 1 year was assumed. This is permitted by rfc7234."
						},
						{
							"uri": "http://host.docker.internal:3000/sitemap.xml",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": "In the absence of an explicitly specified caching lifetime directive in the response, a liberal lifetime heuristic of 1 year was assumed. This is permitted by rfc7234."
						}
					],
					"count": "11",
					"solution": "<p>Validate that the response does not contain sensitive, personal or user-specific information.  If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:</p><p>Cache-Control: no-cache, no-store, must-revalidate, private</p><p>Pragma: no-cache</p><p>Expires: 0</p><p>This configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request. </p>",
					"otherinfo": "<p>In the absence of an explicitly specified caching lifetime directive in the response, a liberal lifetime heuristic of 1 year was assumed. This is permitted by rfc7234.</p>",
					"reference": "<p>https://datatracker.ietf.org/doc/html/rfc7234</p><p>https://datatracker.ietf.org/doc/html/rfc7231</p><p>https://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html</p>",
					"cweid": "524",
					"wascid": "13",
					"sourceid": "8"
				}
			]
		}
	]
}
